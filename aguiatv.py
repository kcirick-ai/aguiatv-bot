import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import requests
from bs4 import BeautifulSoup
import time
from datetime import datetime, timedelta
import re
import logging
import asyncio

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Configura√ß√µes
TOKEN = "7483214978:AAEsfpNCn3qonuBLbDERbPDpQH7CG45TC9g"
USER_ID = 1603479629
GROUP_ID = -1002326740811

# Canais por categoria
CHANNELS = {
    "Filmes": [
        {"name": "AMC", "url": "https://meuguia.tv/programacao/canal/MGM"},
        {"name": "CANAL_BRASIL", "url": "https://meuguia.tv/programacao/canal/CBR"},
        {"name": "CINEMAX", "url": "https://meuguia.tv/programacao/canal/MNX"},
        {"name": "HBO", "url": "https://meuguia.tv/programacao/canal/HBO"},
        {"name": "HBO_2", "url": "https://meuguia.tv/programacao/canal/HB2"},
        {"name": "HBO_FAMILY", "url": "https://meuguia.tv/programacao/canal/HFA"},
        {"name": "HBO_PLUS", "url": "https://meuguia.tv/programacao/canal/HPL"},
        {"name": "HBO_SIGNATURE", "url": "https://meuguia.tv/programacao/canal/HFE"},
        {"name": "MEGAPIX", "url": "https://meuguia.tv/programacao/canal/MPX"},
        {"name": "PARAMOUNT_CHANNEL", "url": "https://meuguia.tv/programacao/canal/PAR"},
        {"name": "SPACE", "url": "https://meuguia.tv/programacao/canal/SPA"},
        {"name": "TCM_TURNER_CLASSIC", "url": "https://meuguia.tv/programacao/canal/TCM"},
        {"name": "TNT", "url": "https://meuguia.tv/programacao/canal/TNT"},
        {"name": "TELECINE_ACTION", "url": "https://meuguia.tv/programacao/canal/TC2"},
        {"name": "TELECINE_CULT", "url": "https://meuguia.tv/programacao/canal/TC5"},
        {"name": "TELECINE_FUN", "url": "https://meuguia.tv/programacao/canal/TC6"},
        {"name": "TELECINE_PIPOCA", "url": "https://meuguia.tv/programacao/canal/TC4"},
        {"name": "TELECINE_PREMIUM", "url": "https://meuguia.tv/programacao/canal/TC1"},
        {"name": "TELECINE_TOUCH", "url": "https://meuguia.tv/programacao/canal/TC3"},
    ],
    "Esportes": [
        {"name": "BAND_SPORTS", "url": "https://meuguia.tv/programacao/canal/BSP"},
        {"name": "COMBATE", "url": "https://meuguia.tv/programacao/canal/135"},
        {"name": "ESPN", "url": "https://meuguia.tv/programacao/canal/ESP"},
        {"name": "ESPN_2", "url": "https://meuguia.tv/programacao/canal/ES2"},
        {"name": "ESPN_3", "url": "https://meuguia.tv/programacao/canal/ES3"},
        {"name": "ESPN_4", "url": "https://meuguia.tv/programacao/canal/ES4"},
        {"name": "ESPN_5", "url": "https://meuguia.tv/programacao/canal/ES5"},
        {"name": "OFF_HD", "url": "https://meuguia.tv/programacao/canal/OFF"},
        {"name": "PREMIERE_CLUBES", "url": "https://meuguia.tv/programacao/canal/121"},
        {"name": "SPORTV", "url": "https://meuguia.tv/programacao/canal/SPO"},
        {"name": "SPORTV_2", "url": "https://meuguia.tv/programacao/canal/SP2"},
        {"name": "SPORTV_3", "url": "https://meuguia.tv/programacao/canal/SP3"},
    ],
    "Variedades": [
        {"name": "ARTE_1", "url": "https://meuguia.tv/programacao/canal/BQ5"},
        {"name": "BIS", "url": "https://meuguia.tv/programacao/canal/MSH"},
        {"name": "CANAL_RURAL", "url": "https://meuguia.tv/programacao/canal/RUR"},
        {"name": "CANAL_DO_BOI", "url": "https://meuguia.tv/programacao/canal/BOI"},
        {"name": "COMEDY_CENTRAL", "url": "https://meuguia.tv/programacao/canal/CCE"},
        {"name": "E!_ENTERTAINMENT_TELEVISION", "url": "https://meuguia.tv/programacao/canal/EET"},
        {"name": "FUTURA", "url": "https://meuguia.tv/programacao/canal/FUT"},
        {"name": "GNT", "url": "https://meuguia.tv/programacao/canal/GNT"},
        {"name": "MULTISHOW", "url": "https://meuguia.tv/programacao/canal/MSW"},
        {"name": "TV_JUSTI√áA", "url": "https://meuguia.tv/programacao/canal/JUS"},
        {"name": "TV_SENADO", "url": "https://meuguia.tv/programacao/canal/SEN"},
        {"name": "TRAVEL_BOX_BRAZIL", "url": "https://meuguia.tv/programacao/canal/TRB"},
        {"name": "VIVA", "url": "https://meuguia.tv/programacao/canal/VIV"},
        {"name": "WOOHOO", "url": "https://meuguia.tv/programacao/canal/WOO"},
    ],
    "Not√≠cias": [
        {"name": "BBC_WORLD_NEWS", "url": "https://meuguia.tv/programacao/canal/BBC"},
        {"name": "BAND_NEWS", "url": "https://meuguia.tv/programacao/canal/NEW"},
        {"name": "BLOOMBERG", "url": "https://meuguia.tv/programacao/canal/BIT"},
        {"name": "CNN_INTERNATIONAL", "url": "https://meuguia.tv/programacao/canal/CNN"},
        {"name": "DEUTSCHE_WELLE", "url": "https://meuguia.tv/programacao/canal/DWL"},
        {"name": "GLOBO_NEWS", "url": "https://meuguia.tv/programacao/canal/GLN"},
    ],
    "Infantil": [
        {"name": "BABY_TV", "url": "https://meuguia.tv/programacao/canal/BAB"},
        {"name": "CARTOON_NETWORK", "url": "https://meuguia.tv/programacao/canal/CAR"},
        {"name": "DISCOVERY_KIDS", "url": "https://meuguia.tv/programacao/canal/DIK"},
        {"name": "GLOOB", "url": "https://meuguia.tv/programacao/canal/GOB"},
        {"name": "NICK_JR.", "url": "https://meuguia.tv/programacao/canal/NJR"},
        {"name": "NICKELODEON", "url": "https://meuguia.tv/programacao/canal/NIC"},
        {"name": "TOONCAST", "url": "https://meuguia.tv/programacao/canal/TOC"},
    ],
    "S√©ries": [
        {"name": "A&E", "url": "https://meuguia.tv/programacao/canal/MDO"},
        {"name": "AXN", "url": "https://meuguia.tv/programacao/canal/AXN"},
        {"name": "ANIMAL_PLANET", "url": "https://meuguia.tv/programacao/canal/APL"},
        {"name": "DISCOVERY_HD_THEATER", "url": "https://meuguia.tv/programacao/canal/DHD"},
        {"name": "EUROCHANNEL", "url": "https://meuguia.tv/programacao/canal/EUR"},
        {"name": "FILM_&_ARTS", "url": "https://meuguia.tv/programacao/canal/BRA"},
        {"name": "LIFETIME", "url": "https://meuguia.tv/programacao/canal/ANX"},
        {"name": "SONY", "url": "https://meuguia.tv/programacao/canal/SET"},
        {"name": "STUDIO_UNIVERSAL", "url": "https://meuguia.tv/programacao/canal/HAL"},
        {"name": "TBS", "url": "https://meuguia.tv/programacao/canal/TBS"},
        {"name": "TNT_S√âRIES", "url": "https://meuguia.tv/programacao/canal/TNS"},
        {"name": "UNIVERSAL_CHANNEL", "url": "https://meuguia.tv/programacao/canal/USA"},
        {"name": "WARNER_CHANNEL", "url": "https://meuguia.tv/programacao/canal/WBT"},
    ],
    "TV_Aberta": [
        {"name": "BAND", "url": "https://meuguia.tv/programacao/canal/BAN"},
        {"name": "GLOBO", "url": "https://meuguia.tv/programacao/canal/GRD"},
        {"name": "MTV", "url": "https://meuguia.tv/programacao/canal/MTV"},
        {"name": "RECORD_NEWS", "url": "https://meuguia.tv/programacao/canal/RCN"},
        {"name": "RECORD_TV", "url": "https://meuguia.tv/programacao/canal/REC"},
        {"name": "REDE_TV", "url": "https://meuguia.tv/programacao/canal/RTV"},
        {"name": "REDE_VIDA", "url": "https://meuguia.tv/programacao/canal/VDA"},
        {"name": "SBT", "url": "https://meuguia.tv/programacao/canal/SBT"},
        {"name": "TV_APARECIDA", "url": "https://meuguia.tv/programacao/canal/TAP"},
        {"name": "TV_BRASIL", "url": "https://meuguia.tv/programacao/canal/TED"},
        {"name": "TV_CULTURA", "url": "https://meuguia.tv/programacao/canal/CUL"},
        {"name": "TV_GAZETA", "url": "https://meuguia.tv/programacao/canal/GAZ"},
    ],
    "Document√°rios": [
        {"name": "DISCOVERY_CHANNEL", "url": "https://meuguia.tv/programacao/canal/DIS"},
        {"name": "DISCOVERY_HOME_&_HEALTH", "url": "https://meuguia.tv/programacao/canal/HEA"},
        {"name": "DISCOVERY_SCIENCE", "url": "https://meuguia.tv/programacao/canal/DSC"},
        {"name": "DISCOVERY_TURBO", "url": "https://meuguia.tv/programacao/canal/DTU"},
        {"name": "DISCOVERY_WORLD", "url": "https://meuguia.tv/programacao/canal/DIW"},
        {"name": "HISTORY_CHANNEL", "url": "https://meuguia.tv/programacao/canal/HIS"},
        {"name": "TLC", "url": "https://meuguia.tv/programacao/canal/TRV"},
    ],
}

# Emojis e IDs dos t√≥picos
CATEGORIES = {
    "Filmes": {"emoji": "üé¨", "topic_id": 4},
    "Esportes": {"emoji": "‚öΩ", "topic_id": 8},
    "Variedades": {"emoji": "üé≠", "topic_id": 68},
    "Not√≠cias": {"emoji": "üì∞", "topic_id": 67},
    "Infantil": {"emoji": "üß∏", "topic_id": 66},
    "S√©ries": {"emoji": "üì∫", "topic_id": 52},
    "TV_Aberta": {"emoji": "üì°", "topic_id": 10},
    "Document√°rios": {"emoji": "üìö", "topic_id": 6},
}

# Estado global para controle da extra√ß√£o
EXTRACTION_STATE = {"running": False, "selected_date": None, "selected_category": None, "selected_channel": None, "header_sent": {}}

# Fun√ß√£o para obter o dia da semana em pt-br
def get_day_of_week(date):
    logging.info(f"Obtendo dia da semana para {date}...")
    days = ["SEGUNDA-FEIRA", "TER√áA-FEIRA", "QUARTA-FEIRA", "QUINTA-FEIRA", "SEXTA-FEIRA", "S√ÅBADO", "DOMINGO"]
    return days[date.weekday()]

# Fun√ß√£o para formatar o nome do canal com _ entre palavras
def format_channel_name(channel_name):
    return "_".join(channel_name.split())

# Fun√ß√£o para extrair programa√ß√µes com retry
def extract_programs(url, date_str, retries=3, timeout=20):
    logging.info(f"Iniciando extra√ß√£o para URL: {url}, Data: {date_str}")
    headers = {"User-Agent": "Mozilla/5.0"}
    
    for attempt in range(retries):
        try:
            logging.info(f"Tentativa {attempt + 1}/{retries}: Enviando requisi√ß√£o HTTP para {url}...")
            response = requests.get(url, headers=headers, timeout=timeout)
            logging.info(f"Requisi√ß√£o bem-sucedida. Status: {response.status_code}")
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")
            logging.info("HTML parseado com BeautifulSoup.")
            
            # Formato da data: "d/m" para o site (ex.: 15/5)
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
            target_date = f"{int(date_obj.strftime('%d'))}/{int(date_obj.strftime('%m'))}"
            logging.info(f"Procurando programa√ß√µes para o dia {target_date}...")
            programs = []
            
            # Localizar o bloco do dia
            logging.info("Buscando cabe√ßalhos de dias...")
            day_headers = soup.find_all("li", class_="subheader devicepadding")
            logging.info(f"Encontrados {len(day_headers)} cabe√ßalhos de dias.")
            current_day = None
            for header in day_headers:
                day_text = header.text.strip()
                logging.info(f"Verificando dia: {day_text}")
                day_match = re.search(r"\d{1,2}/\d{1,2}", day_text)
                if day_match:
                    site_date = day_match.group().strip()
                    logging.info(f"Data do site extra√≠da: '{site_date}'")
                    logging.info(f"Comparando com target_date: '{target_date}'")
                    if site_date == target_date:
                        current_day = header
                        logging.info(f"Dia {target_date} encontrado!")
                        break
                    else:
                        logging.info(f"Data n√£o corresponde: '{site_date}' != '{target_date}'")
            
            if not current_day:
                logging.warning(f"Dia {target_date} n√£o encontrado no site.")
                return []
            
            # Encontrar programa√ß√µes ap√≥s o cabe√ßalho do dia
            logging.info("Procurando programa√ß√µes para o dia encontrado...")
            for sibling in current_day.find_next_siblings():
                if sibling.name == "li" and "subheader" in sibling.get("class", []):
                    logging.info("Novo dia encontrado, parando busca.")
                    break
                if sibling.name == "li" and sibling.find("a", class_="devicepadding"):
                    logging.info("Programa potencial encontrado, analisando...")
                    time_div = sibling.find("div", class_="lileft time")
                    content_div = sibling.find("div", class_="licontent")
                    if not (time_div and content_div):
                        logging.warning("Faltam elementos time ou content, pulando.")
                        continue
                    
                    time = time_div.text.strip()
                    title_tag = content_div.find("h2")
                    category_tag = content_div.find("h3")
                    if not (title_tag and category_tag):
                        logging.warning("Faltam elementos title ou category, pulando.")
                        continue
                    
                    title = title_tag.text.strip()
                    category = category_tag.text.strip()
                    
                    # Ignorar an√∫ncios
                    if "Publicidade" in title or not category:
                        logging.info(f"Programa ignorado: {title} (Publicidade ou sem categoria).")
                        continue
                    
                    programs.append({"time": time, "title": title, "category": category})
                    logging.info(f"Programa adicionado: {time} | {title} | {category}")
            
            if not programs:
                logging.info("Nenhum programa v√°lido encontrado para este dia.")
            else:
                logging.info(f"Total de programas encontrados: {len(programs)}")
            return programs
        
        except requests.exceptions.RequestException as e:
            logging.error(f"Erro ao acessar {url} (tentativa {attempt + 1}/{retries}): {str(e)}")
            if attempt < retries - 1:
                logging.info("Aguardando 5 segundos antes da pr√≥xima tentativa...")
                time.sleep(5)
            else:
                logging.error("Todas as tentativas falharam. Retornando None.")
                return None
        except Exception as e:
            logging.error(f"Erro inesperado na extra√ß√£o: {str(e)}")
            return None

# Fun√ß√£o para formatar programa√ß√µes
def format_programs(channel_name, programs, category, date_str):
    logging.info(f"Formatando programa√ß√µes para {channel_name}, categoria {category}...")
    if not programs:
        logging.info("Nenhum programa para formatar.")
        return None
    
    messages = []
    # Converter data para o formato DD/MM/AA
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    date_display = date_obj.strftime("%d/%m/%y")
    formatted_channel_name = format_channel_name(channel_name)
    current_message = f"‚úÖ #{formatted_channel_name} ({date_display})\n\nw.app/AssistaTodosOsCanaisAqui\n\n"  # Adiciona uma quebra extra ap√≥s o nome
    program_count = 0
    
    for program in programs:
        current_message += f"üïí {program['time']} | {program['title']}\n{program['category']}\n"
        program_count += 1
        
        if program_count >= 10:
            messages.append(current_message)
            current_message = f"‚úÖ #{formatted_channel_name} ({date_display})\n\nw.app/AssistaTodosOsCanaisAqui\n\n"  # Reinicia com a quebra extra
            program_count = 0
    
    if program_count > 0:
        messages.append(current_message)
    
    logging.info(f"Programa√ß√µes formatadas: {len(messages)} mensagens.")
    return messages

# Fun√ß√£o para enviar a CTA
async def send_cta(context: ContextTypes.DEFAULT_TYPE, chat_id: int, topic_id: int, category: str):
    cta_message = (
        "üé¨ Quer mais canais ao vivo, filmes e s√©ries em HD/4K por apenas R$ 35,00/m√™s?\n"
        "üéÅ Pe√ßa agora seu teste gr√°tis de 6 horas com todo o conte√∫do!\n"
        "üì≤ Fale comigo no WhatsApp: (82) 99659-6471 (Diga que veio do grupo!) üöÄ\n"
        "üí• N√£o perca essa chance! Assine hoje e transforme sua TV!\n"
        "\nw.app/AssistaTodosOsCanaisAqui"
    )
    retries = 3
    for attempt in range(retries):
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                message_thread_id=topic_id,
                text=cta_message
            )
            logging.info(f"CTA enviada para o t√≥pico {topic_id} da categoria {category}.")
            break
        except telegram.error.RetryAfter as e:
            logging.warning(f"Rate limit atingido ao enviar CTA. Aguardando {e.retry_after} segundos...")
            time.sleep(e.retry_after)
            continue
        except telegram.error.TimedOut as e:
            logging.error(f"Timeout ao enviar CTA para {category} (tentativa {attempt + 1}/{retries}): {str(e)}")
            if attempt < retries - 1:
                logging.info("Aguardando 5 segundos antes da pr√≥xima tentativa...")
                time.sleep(5)
            else:
                logging.error("Todas as tentativas falharam. Pulando envio da CTA.")
                await context.bot.send_message(
                    chat_id=USER_ID,
                    text=f"‚ùå Erro: Falha ao enviar CTA para {category} devido a timeout."
                )

# Fun√ß√£o para extra√ß√£o di√°ria √†s 18:00
async def schedule_daily_extraction(context: ContextTypes.DEFAULT_TYPE):
    while True:
        now = datetime.now()
        if now.hour == 18 and now.minute == 0 and not EXTRACTION_STATE["running"]:
            logging.info("Iniciando extra√ß√£o di√°ria para o dia seguinte √†s 18:00...")
            EXTRACTION_STATE["running"] = True
            tomorrow = now + timedelta(days=1)
            tomorrow_date = tomorrow.strftime("%Y-%m-%d")
            
            for category in CATEGORIES.keys():
                if not EXTRACTION_STATE["running"]:
                    break
                
                # Reiniciar o estado do header
                EXTRACTION_STATE["header_sent"][category] = False
                
                # Enviar o header da categoria
                if not EXTRACTION_STATE["header_sent"].get(category, False):
                    date_obj = datetime.strptime(tomorrow_date, "%Y-%m-%d")
                    emoji = CATEGORIES[category]["emoji"]
                    day_week = get_day_of_week(date_obj)
                    date_formatted = date_obj.strftime("%d/%m/%Y")
                    header = f"{emoji} PROGRAMA√á√ÉO DE {category.upper()}\nüìÖ {day_week}, {date_formatted}\nw.app/AssistaTodosOsCanaisAqui"
                    topic_id = CATEGORIES[category]["topic_id"]
                    retries = 3
                    for attempt in range(retries):
                        try:
                            await context.bot.send_message(chat_id=GROUP_ID, message_thread_id=topic_id, text=header)
                            logging.info(f"Header enviado para {category}: {header}")
                            EXTRACTION_STATE["header_sent"][category] = True
                            break
                        except telegram.error.RetryAfter as e:
                            logging.warning(f"Rate limit atingido ao enviar header. Aguardando {e.retry_after} segundos...")
                            time.sleep(e.retry_after)
                            continue
                        except telegram.error.TimedOut as e:
                            logging.error(f"Timeout ao enviar header para {category} (tentativa {attempt + 1}/{retries}): {str(e)}")
                            if attempt < retries - 1:
                                logging.info("Aguardando 5 segundos antes da pr√≥xima tentativa...")
                                time.sleep(5)
                            else:
                                logging.error("Todas as tentativas falharam. Pulando envio do header.")
                                await context.bot.send_message(chat_id=USER_ID, text=f"‚ùå Erro: Falha ao enviar header para {category} devido a timeout.")
                
                channels = CHANNELS[category]
                for channel in channels:
                    if not EXTRACTION_STATE["running"]:
                        break
                    
                    logging.info(f"Extraindo para canal: {channel['name']}")
                    programs = extract_programs(channel["url"], tomorrow_date)
                    if programs is None:
                        await context.bot.send_message(chat_id=USER_ID, text=f"‚ùå Erro: Falha ao acessar {channel['name']}. Pulando.")
                        logging.error(f"Falha ao acessar {channel['name']}, pulando.")
                        time.sleep(1)
                        continue
                    
                    messages = format_programs(channel["name"], programs, category, tomorrow_date)
                    if not messages:
                        await context.bot.send_message(chat_id=USER_ID, text=f"‚ùå Erro: Nenhuma programa√ß√£o para {channel['name']} em {tomorrow_date}. Verifique se o site tem dados para essa data.")
                        logging.info(f"Nenhuma programa√ß√£o encontrada para {channel['name']} em {tomorrow_date}.")
                        time.sleep(1)
                        continue
                    
                    topic_id = CATEGORIES[category]["topic_id"]
                    for msg in messages:
                        if not EXTRACTION_STATE["running"]:
                            break
                        retries = 3
                        for attempt in range(retries):
                            try:
                                await context.bot.send_message(chat_id=GROUP_ID, message_thread_id=topic_id, text=msg)
                                logging.info(f"Mensagem enviada ao t√≥pico {topic_id}: {msg[:50]}...")
                                time.sleep(1)  # Atraso de 1 segundo entre mensagens
                                break
                            except telegram.error.RetryAfter as e:
                                logging.warning(f"Rate limit atingido ao enviar mensagem. Aguardando {e.retry_after} segundos...")
                                time.sleep(e.retry_after)
                                continue
                            except telegram.error.TimedOut as e:
                                logging.error(f"Timeout ao enviar mensagem para {channel['name']} (tentativa {attempt + 1}/{retries}): {str(e)}")
                                if attempt < retries - 1:
                                    logging.info("Aguardando 5 segundos antes da pr√≥xima tentativa...")
                                    time.sleep(5)
                                else:
                                    logging.error("Todas as tentativas falharam. Pulando mensagem.")
                                    await context.bot.send_message(chat_id=USER_ID, text=f"‚ùå Erro: Falha ao enviar mensagem para {channel['name']} devido a timeout.")
                        if not EXTRACTION_STATE["running"]:
                            break
                    
                    if not EXTRACTION_STATE["running"]:
                        break
                    
                    time.sleep(2)  # Intervalo entre canais
                
                # Enviar a lista de canais com hashtags
                if EXTRACTION_STATE["running"]:
                    channel_list = " ".join([f"#{format_channel_name(channel['name'])}" for channel in channels])
                    retries = 3
                    for attempt in range(retries):
                        try:
                            await context.bot.send_message(
                                chat_id=GROUP_ID,
                                message_thread_id=CATEGORIES[category]["topic_id"],
                                text=channel_list
                            )
                            logging.info(f"Lista de canais enviada para o t√≥pico {CATEGORIES[category]['topic_id']}: {channel_list}")
                            break
                        except telegram.error.RetryAfter as e:
                            logging.warning(f"Rate limit atingido ao enviar lista de canais. Aguardando {e.retry_after} segundos...")
                            time.sleep(e.retry_after)
                            continue
                        except telegram.error.TimedOut as e:
                            logging.error(f"Timeout ao enviar lista de canais para {category} (tentativa {attempt + 1}/{retries}): {str(e)}")
                            if attempt < retries - 1:
                                logging.info("Aguardando 5 segundos antes da pr√≥xima tentativa...")
                                time.sleep(5)
                            else:
                                logging.error("Todas as tentativas falharam. Pulando envio da lista de canais.")
                                await context.bot.send_message(
                                    chat_id=USER_ID,
                                    text=f"‚ùå Erro: Falha ao enviar lista de canais para {category} devido a timeout."
                                )
                
                # Enviar a CTA
                if EXTRACTION_STATE["running"]:
                    await send_cta(context, GROUP_ID, CATEGORIES[category]["topic_id"], category)
                
                if not EXTRACTION_STATE["running"]:
                    break
            
            if EXTRACTION_STATE["running"]:
                logging.info("Extra√ß√£o di√°ria conclu√≠da com sucesso.")
            EXTRACTION_STATE["running"] = False
            EXTRACTION_STATE["header_sent"].clear()
        
        # Aguardar 1 minuto antes de verificar novamente
        await asyncio.sleep(60)

# Manipuladores de comandos e callbacks
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.info("Comando /start recebido.")
    if update.effective_user.id != USER_ID:
        logging.warning(f"Usu√°rio n√£o autorizado: {update.effective_user.id}")
        return
    
    keyboard = [[InlineKeyboardButton("Escolher Date", callback_data="choose_date")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Bem-vindo! Escolha uma data para as programa√ß√µes.", reply_markup=reply_markup)
    logging.info("Mensagem de boas-vindas enviada.")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.info("Callback de bot√£o recebido.")
    query = update.callback_query
    if query.from_user.id != USER_ID:
        logging.warning(f"Usu√°rio n√£o autorizado: {query.from_user.id}")
        return
    
    await query.answer()
    data = query.data
    logging.info(f"Dados do bot√£o: {data}")
    
    if data == "choose_date":
        today = datetime.now()
        keyboard = []
        date_buttons = []
        for i in range(14):
            date = today + timedelta(days=i)
            date_str = date.strftime("%Y-%m-%d")
            date_display = date.strftime("%d/%m/%Y")
            label = f"{'Hoje' if i == 0 else 'Amanh√£' if i == 1 else ''} - {date_display}".strip()
            date_buttons.append(InlineKeyboardButton(label, callback_data=f"date_{date_str}"))
            # Colocar 2 bot√µes por linha
            if len(date_buttons) == 2:
                keyboard.append(date_buttons)
                date_buttons = []
        if date_buttons:  # Adicionar bot√µes restantes
            keyboard.append(date_buttons)
        keyboard.append([InlineKeyboardButton("Voltar", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("Selecione o dia (dispon√≠vel at√© 14 dias).", reply_markup=reply_markup)
        logging.info("Menu de datas exibido.")
    
    elif data.startswith("date_"):
        date_str = data.split("_")[1]
        EXTRACTION_STATE["selected_date"] = date_str
        logging.info(f"Data selecionada: {date_str}")
        keyboard = []
        category_buttons = []
        for cat in CATEGORIES.keys():
            category_buttons.append(InlineKeyboardButton(cat, callback_data=f"category_{cat}"))
            # Colocar 3 bot√µes por linha
            if len(category_buttons) == 3:
                keyboard.append(category_buttons)
                category_buttons = []
        if category_buttons:  # Adicionar bot√µes restantes
            keyboard.append(category_buttons)
        keyboard.append([InlineKeyboardButton("Todas as Categorias", callback_data="category_all")])
        keyboard.append([InlineKeyboardButton("Voltar", callback_data="choose_date")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        date_display = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d/%m/%Y")
        await query.message.edit_text(f"Escolha uma categoria ou todas para {date_display}.", reply_markup=reply_markup)
        logging.info("Menu de categorias exibido.")
    
    elif data.startswith("category_"):
        category = data.split("_")[1]
        EXTRACTION_STATE["selected_category"] = category if category != "all" else None
        logging.info(f"Categoria selecionada: {category}")
        if category == "all":
            keyboard = [
                [InlineKeyboardButton("Iniciar Extra√ß√£o", callback_data="start_extraction")],
                [InlineKeyboardButton("Voltar", callback_data="choose_date")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            date_display = datetime.strptime(EXTRACTION_STATE["selected_date"], "%Y-%m-%d").strftime("%d/%m/%Y")
            await query.message.edit_text(f"Iniciar extra√ß√£o para Todas as Categorias - {date_display}?", reply_markup=reply_markup)
            logging.info("Confirma√ß√£o para todas as categorias exibida.")
        else:
            keyboard = [[InlineKeyboardButton(channel["name"], callback_data=f"channel_{channel['name']}") for channel in CHANNELS[category][:3]]]
            for i in range(3, len(CHANNELS[category]), 3):
                keyboard.append([InlineKeyboardButton(channel["name"], callback_data=f"channel_{channel['name']}") for channel in CHANNELS[category][i:i+3]])
            keyboard.append([InlineKeyboardButton("Todos os Canais", callback_data="channel_all")])
            keyboard.append([InlineKeyboardButton("Voltar", callback_data=f"date_{EXTRACTION_STATE['selected_date']}")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            date_display = datetime.strptime(EXTRACTION_STATE["selected_date"], "%Y-%m-%d").strftime("%d/%m/%Y")
            await query.message.edit_text(f"Selecione o canal para {category}, {date_display}.", reply_markup=reply_markup)
            logging.info("Menu de canais exibido.")
    
    elif data.startswith("channel_"):
        channel = data.split("_")[1]
        EXTRACTION_STATE["selected_channel"] = channel if channel != "all" else None
        logging.info(f"Canal selecionado: {channel}")
        date_display = datetime.strptime(EXTRACTION_STATE["selected_date"], "%Y-%m-%d").strftime("%d/%m/%Y")
        if EXTRACTION_STATE["selected_category"]:
            target = f"{EXTRACTION_STATE['selected_category']} - {channel if channel != 'all' else 'Todos os Canais'}"
        else:
            target = "Todas as Categorias"
        keyboard = [
            [InlineKeyboardButton("Iniciar Extra√ß√£o", callback_data="start_extraction")],
            [InlineKeyboardButton("Voltar", callback_data=f"category_{EXTRACTION_STATE['selected_category'] or 'all'}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(f"Iniciar extra√ß√£o para {target} - {date_display}?", reply_markup=reply_markup)
        logging.info("Confirma√ß√£o de extra√ß√£o exibida.")
    
    elif data == "start_extraction":
        if EXTRACTION_STATE["running"]:
            await query.message.edit_text("Extra√ß√£o j√° em andamento. Use 'Parar Extra√ß√£o' para interromper.")
            logging.info("Extra√ß√£o j√° em andamento, comando ignorado.")
            return
        
        EXTRACTION_STATE["running"] = True
        date_display = datetime.strptime(EXTRACTION_STATE["selected_date"], "%Y-%m-%d").strftime("%d/%m/%Y")
        target = "Todas as Categorias" if not EXTRACTION_STATE["selected_category"] else \
                 f"{EXTRACTION_STATE['selected_category']} - {EXTRACTION_STATE['selected_channel'] or 'Todos os Canais'}"
        keyboard = [[InlineKeyboardButton("Parar Extra√ß√£o", callback_data="stop_extraction")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(f"üì¢ Extraindo programa√ß√µes para {target} - {date_display}...", reply_markup=reply_markup)
        logging.info(f"Iniciando extra√ß√£o para {target} - {date_display}")
        
        # Verificar se a data √© futura e avisar o usu√°rio
        selected_date = datetime.strptime(EXTRACTION_STATE["selected_date"], "%Y-%m-%d")
        today = datetime.now()
        if selected_date > today + timedelta(days=1):
            await context.bot.send_message(chat_id=USER_ID, text="‚ö†Ô∏è Aviso: Programa√ß√µes para datas futuras podem n√£o estar dispon√≠veis ainda.")
            logging.info("Aviso de data futura enviado.")
        
        # Iniciar extra√ß√£o
        categories = list(CATEGORIES.keys()) if not EXTRACTION_STATE["selected_category"] else [EXTRACTION_STATE["selected_category"]]
        for category in categories:
            if not EXTRACTION_STATE["running"]:
                break
                
            # Reiniciar o estado do header para cada categoria
            EXTRACTION_STATE["header_sent"][category] = False
            
            # Enviar o header da categoria apenas uma vez por categoria
            if not EXTRACTION_STATE["header_sent"].get(category, False):
                date_obj = datetime.strptime(EXTRACTION_STATE["selected_date"], "%Y-%m-%d")
                emoji = CATEGORIES[category]["emoji"]
                day_week = get_day_of_week(date_obj)
                date_formatted = date_obj.strftime("%d/%m/%Y")
                header = f"{emoji} PROGRAMA√á√ÉO DE {category.upper()}\nüìÖ {day_week}, {date_formatted}\nw.app/AssistaTodosOsCanaisAqui"
                topic_id = CATEGORIES[category]["topic_id"]
                retries = 3
                for attempt in range(retries):
                    try:
                        await context.bot.send_message(chat_id=GROUP_ID, message_thread_id=topic_id, text=header)
                        logging.info(f"Header enviado para {category}: {header}")
                        EXTRACTION_STATE["header_sent"][category] = True
                        break
                    except telegram.error.RetryAfter as e:
                        logging.warning(f"Rate limit atingido ao enviar header. Aguardando {e.retry_after} segundos...")
                        time.sleep(e.retry_after)
                        continue
                    except telegram.error.TimedOut as e:
                        logging.error(f"Timeout ao enviar header para {category} (tentativa {attempt + 1}/{retries}): {str(e)}")
                        if attempt < retries - 1:
                            logging.info("Aguardando 5 segundos antes da pr√≥xima tentativa...")
                            time.sleep(5)
                        else:
                            logging.error("Todas as tentativas falharam. Pulando envio do header.")
                            await context.bot.send_message(chat_id=USER_ID, text=f"‚ùå Erro: Falha ao enviar header para {category} devido a timeout.")
            
            channels = [ch for ch in CHANNELS[category] if EXTRACTION_STATE["selected_channel"] == ch["name"]] if EXTRACTION_STATE["selected_channel"] else CHANNELS[category]
            for channel in channels:
                if not EXTRACTION_STATE["running"]:
                    logging.info("Extra√ß√£o interrompida pelo usu√°rio.")
                    break
                
                logging.info(f"Extraindo para canal: {channel['name']}")
                programs = extract_programs(channel["url"], EXTRACTION_STATE["selected_date"])
                if programs is None:
                    await context.bot.send_message(chat_id=USER_ID, text=f"‚ùå Erro: Falha ao acessar {channel['name']}. Pulando.")
                    logging.error(f"Falha ao acessar {channel['name']}, pulando.")
                    time.sleep(1)
                    continue
                
                messages = format_programs(channel["name"], programs, category, EXTRACTION_STATE["selected_date"])
                if not messages:
                    await context.bot.send_message(chat_id=USER_ID, text=f"‚ùå Erro: Nenhuma programa√ß√£o para {channel['name']} em {date_display}. Verifique se o site tem dados para essa data.")
                    logging.info(f"Nenhuma programa√ß√£o encontrada para {channel['name']} em {date_display}.")
                    time.sleep(1)
                    continue
                
                topic_id = CATEGORIES[category]["topic_id"]
                for msg in messages:
                    if not EXTRACTION_STATE["running"]:
                        break
                    retries = 3
                    for attempt in range(retries):
                        try:
                            await context.bot.send_message(chat_id=GROUP_ID, message_thread_id=topic_id, text=msg)
                            logging.info(f"Mensagem enviada ao t√≥pico {topic_id}: {msg[:50]}...")
                            time.sleep(1)  # Atraso de 1 segundo entre mensagens
                            break
                        except telegram.error.RetryAfter as e:
                            logging.warning(f"Rate limit atingido ao enviar mensagem. Aguardando {e.retry_after} segundos...")
                            time.sleep(e.retry_after)
                            continue
                        except telegram.error.TimedOut as e:
                            logging.error(f"Timeout ao enviar mensagem para {channel['name']} (tentativa {attempt + 1}/{retries}): {str(e)}")
                            if attempt < retries - 1:
                                logging.info("Aguardando 5 segundos antes da pr√≥xima tentativa...")
                                time.sleep(5)
                            else:
                                logging.error("Todas as tentativas falharam. Pulando mensagem.")
                                await context.bot.send_message(chat_id=USER_ID, text=f"‚ùå Erro: Falha ao enviar mensagem para {channel['name']} devido a timeout.")
                    if not EXTRACTION_STATE["running"]:
                        break
                
                if not EXTRACTION_STATE["running"]:
                    break
                
                time.sleep(2)  # Intervalo entre canais
            
            # Enviar a lista de canais com hashtags
            if EXTRACTION_STATE["running"]:
                channel_list = " ".join([f"#{format_channel_name(channel['name'])}" for channel in channels])
                retries = 3
                for attempt in range(retries):
                    try:
                        await context.bot.send_message(
                            chat_id=GROUP_ID,
                            message_thread_id=CATEGORIES[category]["topic_id"],
                            text=channel_list
                        )
                        logging.info(f"Lista de canais enviada para o t√≥pico {CATEGORIES[category]['topic_id']}: {channel_list}")
                        break
                    except telegram.error.RetryAfter as e:
                        logging.warning(f"Rate limit atingido ao enviar lista de canais. Aguardando {e.retry_after} segundos...")
                        time.sleep(e.retry_after)
                        continue
                    except telegram.error.TimedOut as e:
                        logging.error(f"Timeout ao enviar lista de canais para {category} (tentativa {attempt + 1}/{retries}): {str(e)}")
                        if attempt < retries - 1:
                            logging.info("Aguardando 5 segundos antes da pr√≥xima tentativa...")
                            time.sleep(5)
                        else:
                            logging.error("Todas as tentativas falharam. Pulando envio da lista de canais.")
                            await context.bot.send_message(
                                chat_id=USER_ID,
                                text=f"‚ùå Erro: Falha ao enviar lista de canais para {category} devido a timeout."
                            )
            
            # Enviar a CTA
            if EXTRACTION_STATE["running"]:
                await send_cta(context, GROUP_ID, CATEGORIES[category]["topic_id"], category)
            
            if not EXTRACTION_STATE["running"]:
                break
        
        if EXTRACTION_STATE["running"]:
            keyboard = [[InlineKeyboardButton("Voltar ao In√≠cio", callback_data="start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text("‚úÖ Extra√ß√£o conclu√≠da! Programa√ß√µes enviadas.", reply_markup=reply_markup)
            logging.info("Extra√ß√£o conclu√≠da com sucesso.")
        EXTRACTION_STATE["running"] = False
        EXTRACTION_STATE["header_sent"].clear()  # Limpa o estado dos headers
    
    elif data == "stop_extraction":
        EXTRACTION_STATE["running"] = False
        keyboard = [[InlineKeyboardButton("Voltar ao In√≠cio", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("‚õî Extra√ß√£o interrompida.", reply_markup=reply_markup)
        logging.info("Extra√ß√£o interrompida pelo usu√°rio.")
    
    elif data == "start":
        keyboard = [[InlineKeyboardButton("Escolher Date", callback_data="choose_date")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("Bem-vindo! Escolha uma data para as programa√ß√µes.", reply_markup=reply_markup)
        logging.info("Mensagem de boas-vindas enviada.")

def main():
    # Inicializar a aplica√ß√£o
    app = Application.builder().token(TOKEN).build()
    logging.info("Aplica√ß√£o inicializada.")

    # Adicionar handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    logging.info("Handlers adicionados.")

    # Iniciar a tarefa de extra√ß√£o di√°ria
    async def start_task(application):
        await asyncio.create_task(schedule_daily_extraction(application))

    # Adicionar inicializa√ß√£o ass√≠ncrona para criar a tarefa
    app.job_queue.run_once(start_task, 0)

    # Iniciar o polling
    app.run_polling(allowed_updates=Update.ALL_TYPES)
    logging.info("Polling iniciado.")

if __name__ == "__main__":
    logging.info("Script iniciado.")
    main()
    logging.info("Script finalizado.")
